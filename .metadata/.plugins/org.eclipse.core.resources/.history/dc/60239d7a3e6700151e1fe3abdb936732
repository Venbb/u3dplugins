package com.unity.plugins;

import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.content.Context;
import android.text.format.Formatter;
import android.util.Log;

import com.unity3d.player.UnityPlayer;

public class MemEx
{
	private static final String TAG = "MemEx";

	public static void log()
	{
		Log.d(TAG, "getAvailMem = " + getAvailMem() + ";getMaxMemory = " + getMaxMemory() + ";getTotalMemory = " + getTotalMemory() + ";getFreeMemory = " + getFreeMemory());
	}

	// 系统可用内存
	public static float getAvailMem()
	{
		MemoryInfo mi = new MemoryInfo();
		ActivityManager am = (ActivityManager) UnityPlayer.currentActivity.getSystemService(Context.ACTIVITY_SERVICE);
		am.getMemoryInfo(mi);
		long memSize = mi.availMem;
		float size = ((float) memSize) / 1024 / 1024;
		Log.d(TAG, "getAvailMem = " + formateFileSize(memSize) + ";lowMemory = " + mi.lowMemory + ";threshold = " + formateFileSize(mi.threshold) + ";threshold long = " + mi.threshold);
		return size;
	}

	// 最大内存
	public static int getMaxMemory()
	{
		int maxMemory = ((int) Runtime.getRuntime().maxMemory()) / 1024 / 1024;
		Log.d(TAG, "getMaxMemory = " + maxMemory);
		return maxMemory;
	}

	// 占用内存
	public static int getTotalMemory()
	{
		int totalMemory = ((int) Runtime.getRuntime().totalMemory()) / 1024 / 1024;
		Log.d(TAG, "getTotalMemory = " + totalMemory);
		return totalMemory;
	}

	// 剩余内存
	public static int getFreeMemory()
	{
		int freeMemory = ((int) Runtime.getRuntime().freeMemory()) / 1024 / 1024;
		Log.d(TAG, "getFreeMemory = " + freeMemory);
		return freeMemory;
	}

	// 调用系统函数，字符串转换 long -String KB/MB
	private static String formateFileSize(long size)
	{
		return Formatter.formatFileSize(UnityPlayer.currentActivity, size);
	}
}
