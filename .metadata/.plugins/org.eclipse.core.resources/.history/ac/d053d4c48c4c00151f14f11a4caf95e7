package com.iap.cm;

import mm.purchasesdk.Purchase;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import com.unity3d.player.UnityPlayer;

public class CM_IAPController
{
	static final String TAG = "CM_IAPController";

	static Purchase purchase;
	static Context mContext;

	static ProgressDialog mProgressDialog;
	static IAPListener mListener;

	static String APPID = "";
	static String APPKEY = "";

	static String mPaycode;
	static int mProductNum = 1;
	static String ObjectName = "";
	static String CkFun = "";

	public static Boolean isInit = false;

	static Activity getActivity()
	{
		return UnityPlayer.currentActivity;
	}

	public static void SetListener(String _objectName, String _ckFun)
	{
		ObjectName = _objectName;
		CkFun = _ckFun;
		Log.d(TAG, "SetListener ObjectName:" + ObjectName + ";CkFun:" + CkFun);
	}

	// 初始化
	public static void Init(String _objectName, String _ckFun)
	{
		ObjectName = _objectName;
		CkFun = _ckFun;
		Log.d(TAG, "Init ObjectName:" + ObjectName + ";CkFun:" + CkFun);

		mContext = getActivity();
		new Handler(Looper.getMainLooper()).post(new Runnable()
		{
			@Override
			public void run()
			{
				ReadAppMetaData();
				if (!APPID.isEmpty() && !APPKEY.isEmpty()) OnInit();
			}
		});
	}

	// 读取配置数据
	static void ReadAppMetaData()
	{
		try
		{
			ApplicationInfo appinfo = mContext.getPackageManager().getApplicationInfo(mContext.getPackageName(), PackageManager.GET_META_DATA);
			APPID = appinfo.metaData.getString("iap_cm_appid");
			APPKEY = appinfo.metaData.getString("iap_cm_appkey");
			Log.d(TAG, "APPID:" + APPID + ";APPKEY:" + APPKEY);
		}
		catch (NameNotFoundException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	static void OnInit()
	{
		IAPHandler iapHandler = new IAPHandler();
		Log.d(TAG, "step1.实例化PurchaseListener。");
		/**
		 * IAP组件初始化.包括下面3步。
		 */
		/**
		 * step1.实例化PurchaseListener。实例化传入的参数与您实现PurchaseListener接口的对象有关。
		 * 例如，此Demo代码中使用IAPListener继承PurchaseListener，其构造函数需要Context实例。
		 */
		mListener = new IAPListener(mContext, iapHandler);
		Log.d(TAG, "step2.获取Purchase实例。");
		/**
		 * step2.获取Purchase实例。
		 */
		purchase = Purchase.getInstance();
		Log.d(TAG, "step3.向Purhase传入应用信息。APPID:" + APPID + ";APPKEY:" + APPKEY);
		/**
		 * step3.向Purhase传入应用信息。APPID，APPKEY。 需要传入参数APPID，APPKEY。 APPID，见开发者文档
		 * APPKEY，见开发者文档
		 */
		try
		{
			purchase.setAppInfo(APPID, APPKEY);
		}
		catch (Exception e1)
		{
			e1.printStackTrace();
		}
		Log.d(TAG, "step4. IAP组件初始化开始");
		/**
		 * step4. IAP组件初始化开始， 参数PurchaseListener，初始化函数需传入step1时实例化的
		 * PurchaseListener。
		 */
		try
		{
			purchase.init(mContext, mListener);

		}
		catch (Exception e)
		{
			e.printStackTrace();
			return;
		}
	}

	// 购买
	public static void Order(String paycode, int paynum)
	{
		Log.d(TAG, "createOrder. mPaycode:" + paycode);
		Log.d(TAG, "createOrder. mProductNum:" + paynum);
		mPaycode = paycode;
		mProductNum = paynum;
		if (!isInit)
		{
			Init(ObjectName, CkFun);
			return;
		}
		GoOrder();
	}

	public static void GoOrder()
	{
		if (mPaycode.isEmpty()) return;
		new Handler(Looper.getMainLooper()).post(new Runnable()
		{
			@Override
			public void run()
			{
				OnOrder();
			}
		});
	}

	static void OnOrder()
	{
		try
		{
			Log.d(TAG, "mPaycode:" + mPaycode + ";mProductNum:" + mProductNum);
			purchase.order(mContext, mPaycode, mProductNum, mListener);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		mPaycode = "";
		mProductNum = 1;
	}

	// 退订
	public static void Unsubscribe(String paycode)
	{
		if (!isInit)
		{
			Log.d(TAG, "init haven't finish !");
			return;
		}
		try
		{
			purchase.unsubscribe(mContext, paycode, mListener);

		}
		catch (Exception e)
		{
			e.printStackTrace();
			return;
		}
	}

	// 查询
	public static void Query(String paycode)
	{
		if (!isInit)
		{
			Log.d(TAG, "init haven't finish !");
			return;
		}
		try
		{
			purchase.query(mContext, paycode, null, mListener);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			return;
		}
	}

	// 清除缓存
	public static void ClearCache()
	{
		if (!isInit)
		{
			Log.d(TAG, "init haven't finish !");
			return;
		}
		try
		{
			purchase.clearCache(mContext);
		}
		catch (Exception e1)
		{
			e1.printStackTrace();
			return;
		}
	}

	// 发送消息给Unity
	public static void SendMessage(String dataStr)
	{
		UnityPlayer.UnitySendMessage(ObjectName, CkFun, dataStr);
	}

	private static void ShowProgressDialog()
	{
		if (mProgressDialog == null)
		{
			mProgressDialog = new ProgressDialog(mContext);
			mProgressDialog.setIndeterminate(true);
			mProgressDialog.setMessage("请稍候.....");
		}
		if (!mProgressDialog.isShowing())
		{
			mProgressDialog.show();
		}
	}

	public static void DismissProgressDialog()
	{
		if (mProgressDialog != null && mProgressDialog.isShowing())
		{
			mProgressDialog.dismiss();
		}
	}
}
