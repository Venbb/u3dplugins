package com.unity.plugins;

import android.content.Context;
import android.os.Environment;

import com.unity3d.player.UnityPlayer;

public class PathEx
{
	// 设备外存是否存在并且可读写
	static public final boolean hasSDCard()
	{
		// MEDIA_MOUNTED（SDcard存在并且可以进行读写）MEDIA_MOUNTED_READ_ONLY(SDcard存在，只可以进行读操作)
		return getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
	}

	// 设备的外存是否是用内存模拟的，是则返回true。(API Level 11)
	// public static final boolean IsExternalStorageEmulated()
	// {
	// return Environment.isExternalStorageEmulated();
	// }

	// 设备的外存是否是可以拆卸的，比如SD卡，是则返回true。(API Level 9)
	public static final boolean isExternalStorageRemovable()
	{
		return Environment.isExternalStorageRemovable();
	}

	// 得到Android的根目录
	public static final String getRootDirectory()
	{
		return Environment.getRootDirectory().getPath();
	}

	// 应用在内存上的目录
	public static final String getFilesDir()
	{
		return getApplicationFilesDir(UnityPlayer.currentActivity);
	}

	// 应用在内存上的缓存目录
	public static final String getCacheDir()
	{
		return getApplicationgetCacheDir(UnityPlayer.currentActivity);
	}

	// 应用在内存上的目录
	public static final String getApplicationFilesDir(Context context)
	{
		// 可以获取到"/data/data/<package name>/files" 这个方法获取的目录不是在sdcard上，而是在应用安装的目录
		return context.getFilesDir().getPath();
	}

	// 应用在内存上的缓存目录
	public static final String getApplicationgetCacheDir(Context context)
	{
		// 可以获取到"/data/data/<package name>/cache"
		// 这个方法获取的目录不是在sdcard上，而是在应用安装的目录，这个文件里面的数据在设备内存不足的时候，会被系统删除数据。注意：你不能依赖系统帮你删除这些文件，当这个文件夹里面的数据超过1MB的时候，系统会删除这个文件夹里面的数据。
		return context.getCacheDir().getPath();
	}

	public static final String getApplicationExternalFilesDir(Context context)
	{
		// 可以获取到 SDCard/Android/data/你的应用的包名/files/ 目录，一般放一些长时间保存的数据
		return context.getExternalFilesDir(Environment.DIRECTORY_PICTURES).getPath();
	}

	public static final String getmm(Context context)
	{
		// 可以获取到 SDCard/Android/data/你的应用包名/cache/目录，一般存放临时缓存数据
		return context.getExternalCacheDir().getPath();
	}

	// 主要外部存储目录的状态
	public static final String getExternalStorageState()
	{
		return Environment.getExternalStorageState();
	}
}
